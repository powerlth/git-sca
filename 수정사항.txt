전체적인 코드 공통적으로 리펙토링한 부분 (sonalint 심각 경고) : 
1. 정적 속성들 이름 변경 -> 모두 대문자로 쓰는것이 원칙이라 바꿈
2. Transient 키워드를 사용하여 일부 변수를 직렬화에서 제외시킴 -> 파일 관리를 용이하게 하기 위해서
3. 속성이 static인 경우 다른 클래스의 인스턴스 컨텍스트에서 사용할 때 문제가 일어나지 않게 하기 위해 getter, setter 메소드를 구현하여 메소드를 통해 사용할 수 있도록 구현

duck 클래스 
1. duckline, flyingduckline 속성 부분 : duck 클래스보다 game 클래스에 두는게 적절한 것 같아 옮김 -> game 클래스의 메소드에서 duckline을 직접 쓰기 때문에 옮기는것이 적절하다 판단함

framework 클래스 
1. gameloop 메소드 안에서 state를 관리하는 부분을 별도의 클래스인 gamestatemanager 클래스로 분리하였음 
-> framework에서는 게임 화면을 그리는 활동만 하도록 하고, state를 다루는 부분을 분리하도록 하는 것이 응집도를 높이고 결합도를 낮추며, 상태 관리를 명확하게 할 수 있을것 같아 변경함
2, keyListner, MouseLinstner 관련 로직을 담당하는 메소드들을 inputhandler 클래스로 따로 분리하여 inputhandler가 해당 로직을 담당하도록 함 
-> 하나의 기능을 하는 SRP 원칙을 지키도록 하기 위해, 기능 확장에 열리는 OCP 원칙을 지키도록 하기 위해 따로 분리하는것이 좋다고 판단함
3. 소리를 담당하는 부분을 별도의 AudioManager 클래스로 분리하여 여기서 소리와 관련된 로직을 담당하도록 하게 함
-> 클래스가 하나의 책임을 가지도록 하는 SRP원칙을 지키고 확장에 열리도록 하는 OCP 원칙을 지키며 유지보수성을 높이기 위해 따로 분리하는 것이 좋다고 판단함

game 클래스
1. updategame 메소드가 크다고 판단하여 update 메소드를 createNewDucks, manageTreasureBox, updateStage, updateDucks, handlePlayerShooting, checkGameOver등의 메소드로 분해함 
-> 메소드가 하나의 기능을 하는 SRP 원칙을 지키도록 하기 위해, 기능 확장에 열리는 OCP 원칙을 지키도록 하기 위해 큰 메소드 작은 여러개의 메소드로 분해하는것이 좋다고 판단함
2. 오리 속도를 변경하는 부분을 setDuckSpeedMultiplier 메소드를 사용하여 변수 캡슐화함 
-> 정보 은닉 원칙을 지키도록 하기 위해 캡슐화 하는 것이 좋다고 판단함
3. g2d의 폰트를 정하는 부분이 중복되는 코드가 많아 GraphicsUtils 클래스에 따로 분리하여 폰트 설정을 통합적으로 관리하도록 바꿈 
-> 코드의 유지보수성과 가독성을 높이게 하기 위해 분리하여 관리하는것이 좋다고 판단함

Mainmenu 클래스
1. MouseClick 메소드에서 이벤트 처리 로직을 제거하고 getStartButtonPosition , getStageButtonPositions 메소드로 분해함 
-> 메소드가 하나의 기능을 하는 SRP 원칙을 지키도록 하기 위해, 기능 확장에 열리는 OCP 원칙을 지키도록 하기 위해 큰 메소드 작은 여러개의 메소드로 분해하는것이 좋다고 판단함

Shop2 클래스
1. 마우스클릭을 담당하는 부분을 다른 클래스로 옮김
2. 아이템 데이터와 관련된 메소드로 변수들을 조작하도록 함
-> SRP 원칙 지키기 위해, 캡슐화 원칙을 지키기 위해






